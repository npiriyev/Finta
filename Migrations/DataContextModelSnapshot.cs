// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("WebApplication1.Data.Entities.AskEntity", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("InstrumentId", "Timestamp");

                    b.ToTable("Asks");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.BidEntity", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("InstrumentId", "Timestamp");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.InstrumentsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TickSize")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.InsturmentMappingEntity", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MappingType")
                        .HasColumnType("TEXT");

                    b.Property<double>("DefaultOrderSize")
                        .HasColumnType("REAL");

                    b.Property<string>("Exhange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InstrumentId", "MappingType");

                    b.ToTable("InstrumentMappings");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.LastEntity", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Change")
                        .HasColumnType("REAL");

                    b.Property<float>("ChangePct")
                        .HasColumnType("REAL");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("InstrumentId", "Timestamp");

                    b.ToTable("Lasts");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.AskEntity", b =>
                {
                    b.HasOne("WebApplication1.Data.Entities.InstrumentsEntity", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.BidEntity", b =>
                {
                    b.HasOne("WebApplication1.Data.Entities.InstrumentsEntity", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.InsturmentMappingEntity", b =>
                {
                    b.HasOne("WebApplication1.Data.Entities.InstrumentsEntity", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("WebApplication1.Data.Entities.LastEntity", b =>
                {
                    b.HasOne("WebApplication1.Data.Entities.InstrumentsEntity", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });
#pragma warning restore 612, 618
        }
    }
}
